export default class EscMenu extends Phaser.GameObjects.Container {
  constructor(scene, x, y) {
    super(scene, x, y);

    this.scene = scene;
    this.idxSelection = 0;
    this.totalOptions = 4;

    // Add this container to the scene
    scene.add.existing(this);

    // Build the UI
    this.createSelectionMenu();
    this.addControls();
  }


  createSelectionMenu() {
    const menuSelectionUI = this.scene.add.image(0, 0, 'escMenuSelection')
      .setOrigin(0.5)
      .setScale(2);
    this.add(menuSelectionUI);

    this.createButtons();
  }

  createButtons() {
    const positions = [0, 35, 70, 105];
    this.buttons = [];
    this.frameOffsets = [0, 3, 6, 9];

    for (let i = 0; i < 4; i++) {
      const btn = this.scene.add.sprite(-120, -70 + positions[i], 'escMenuButtons', this.frameOffsets[i])
        .setScale(2);
      this.add(btn);
      this.buttons.push(btn);
    }

    this.updateButtons();
  }

  updateButtons() {
    for (let i = 0; i < this.buttons.length; i++) {
      const baseFrame = this.frameOffsets[i];
      this.buttons[i].setFrame(i === this.idxSelection ? baseFrame + 1 : baseFrame);
    }
  }

  addControls() {
    this.GOBACK = this.scene.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.ESC);
    this.SELECT = this.scene.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.SPACE);
    this.GOUP = this.scene.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.W);
    this.GODOWN = this.scene.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.S);
  }

  update() {
    if (Phaser.Input.Keyboard.JustDown(this.GOBACK)) {
      this.emit('close');
    } else if (Phaser.Input.Keyboard.JustDown(this.SELECT)) {
      this.selectOption();
    } else if (Phaser.Input.Keyboard.JustDown(this.GOUP)) {
      this.idxSelection = (this.idxSelection - 1 + this.totalOptions) % this.totalOptions;
      this.updateButtons();
    } else if (Phaser.Input.Keyboard.JustDown(this.GODOWN)) {
      this.idxSelection = (this.idxSelection + 1) % this.totalOptions;
      this.updateButtons();
    }
  }

  selectOption() {
    const baseFrame = this.frameOffsets[this.idxSelection];
    this.buttons[this.idxSelection].setFrame(baseFrame + 2);

    this.scene.time.delayedCall(200, () => {
      const destinations = ['art', 'profile', 'project', 'exit'];
      this.emit('select', destinations[this.idxSelection]);
    });
  }
}
